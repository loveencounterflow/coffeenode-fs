// Generated by CoffeeScript 1.7.1
(function() {
  var FS, TRM, TYPES, assert, log;

  FS = require('./main');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  log = TRM.log.bind(TRM);

  assert = require('assert');

  this.test_argument_parsing = function() {
    var callback, f;
    f = function() {
      return FS._get_route_options_handler(arguments);
    };
    callback = function() {};
    assert.throws((function() {
      return f();
    }), /^Error: expected between one and three arguments, got 0$/);
    assert.throws((function() {
      return f(1, 2, 3, 4, 5);
    }), /^Error: expected between one and three arguments, got 5$/);
    assert.throws((function() {
      return f(null);
    }), /^Error: expected a text, got a null$/);
    assert.throws((function() {
      return f('');
    }), /^Error: route must not be empty$/);
    assert.throws((function() {
      return f('some/file', 42);
    }), /^Error: expected second argument to be a POD or a function, got a number$/);
    assert.throws((function() {
      return f('some/file', {
        foo: 'bar'
      }, 42);
    }), /^Error: expected a function, got a number$/);
    assert.deepEqual(f('some/file'), [
      'some/file', {
        encoding: 'utf-8',
        mode: null
      }, null
    ]);
    assert.deepEqual(f('some/file', callback), [
      'some/file', {
        encoding: 'utf-8',
        mode: null
      }, callback
    ]);
    assert.deepEqual(f('some/file', {
      encoding: 'utf-8'
    }), [
      'some/file', {
        encoding: 'utf-8',
        mode: null
      }, null
    ]);
    assert.deepEqual(f('some/file', {
      encoding: 'utf-8'
    }, callback), [
      'some/file', {
        encoding: 'utf-8',
        mode: null
      }, callback
    ]);
    return assert.deepEqual(f('some/file', {
      encoding: 'cp1252'
    }, callback), [
      'some/file', {
        encoding: 'cp1252',
        mode: null
      }, callback
    ]);
  };

  this.test_argument_parsing();

}).call(this);
